class 类
extend 继承
private 私有
public 公有
abstract 抽象
this 本类对象
super 父类对象
Thread 线程
 |-run() 
 |-Runnable
 |-start() 使线程开始执行
 |-currentThread() 返回线程对象的引用
 |-getName() 返回线程名称
 |-synchronized 锁/同步
 |-notify() 唤醒最早wait的线程
 |-wait() 让线程不去抢夺cpu资源/等待
 |-Lock Lokc类
   |-ReentrantLock
   |-Condition
    |-await() 等待
    |-signal() 唤醒
    |-signalAll()  唤醒
static 静态
final 最终
finally 用于try的
Exception 异常
Object 上帝类
 |-equals() 比较
 |-toString() 返回对象的字符串表示
interface 接口
implements 实现
throws 抛（用于函数上，throws后面跟的异常类可以跟多个，用逗号隔开
throw 抛（用于函数内，后跟的异常对象
package 包
import 导入包
String 字符串
  |-获取
    |-字符串中包含的字符数，即字符串长度
      int length();获取长度
    |-根据位置获取位置上的某个字符
      char charAt(int index);
    |-根据字符获取该字符在字符串中位置
      int indexOf(int ch);返回的ch在字符串中第一次出现的位置
      int indexOf(int ch, int fromIndex);从fromIndex指定位置开始，获取ch在字符串中出现的位置

      int indexOf(String str);返回的时str在字符串中第一次出现的位置
      int indexOf(String str, int fromIndex);从fromIndex指定位置开始，获取str在字符串中出现的位置

      int lastIndexOf(int ch);按逆序进行操作
  |-判断
    |-字符串中是否包含某一个子串
      boolean contains(CharSequence s)
      特殊之处：indexOf(str);可以索引str第一次出现位置，如果返回=1，表示该str不在字符串中存在
      所以，也可以用于对指定判断是否包含
      if(str,indexOf("aa")!=-1)

      而且该方法既可以判断，又可以获取出现的位置
    |-字符中是否有内容
      boolean isEmpty();
    |-字符串是否以指定内容开头
      boolean startsWith(String suffix);
    |-字符串是否以指定内容结尾
      boolean endsWith(String suffix)
    |-判断字符串的内容是否相同；复写了Object中的equals方法
      boolean equals(Object anObject)  
    |-判断字符串的内容是否相同，并忽略大小写
      boolean equalsIgnoreCase(String anotherString)  
  |-转换
    |-将字符数组转成字符串
      构造函数
        String(char[] value)
        String(char[] value, int offset, int count)
      静态方法
        static String copyValueOf(char[] data) 
        static String copyValueOf(char[] data, int offset, int count)  
        static String valueOf(char c)  
    |-将字符串转成字符数组
     char[] toCharArray()  
    |-将字节数组转成字符串
      String(byte[] value)
      String(byte[] value, int offset, int count)
    |-将字符串转成字节数组
      byte[] getBytes(String charsetName)  
    特殊：字符串和字节数组在转换过程中，是可以指定编码表的
    |-将基本数据类型转成字符串
      static String valueOf(int i) 
      static String valueOf(double d) 
  |-替换
    String replace(char oldChar, char newChar)  //若替换的字符不存在则不替换
    String replace(CharSequence target, CharSequence replacement) 
  |-切割
    String[] split(String regex)  
    String[] split(String regex, int limit)  
  |-子串
    获取字符串中的一部分
      String substring(int beginIndex)  从指定位置开始到结尾
      String substring(int beginIndex, int endIndex)  包含头，不包含尾
  |-转换，去除空格，比较
    |-将字符串转换成大写或小写
    |-将字符串连段的多个空格去除
    |-对两个字符串进行自然顺序的比较
StringBuffer 字符串缓冲区(多线程使用)
  |-是一个容器
  1.长度可变化
  2.可以直接操作多个数据类型
  3.最终会通过toString方法变成字符串
  |-存储
    |-StringBuffer append(Object obj)  将指定的 obj 添加到已有数据结尾
    |-StringBuffer insert(int offset, Object obj)  可以将obj插入指定的offset位置后
  |-删除
    |-StringBuffer delete(int start, int end)  删除缓冲区中的数据包含start，不包含end/包含头不包含尾
    |-StringBuffer deleteCharAt(int index)  
  |-获取
    |-char charAt(int index)  
    |-int indexOf(String str)  
    |-int lastIndexOf(String str)  
    |-int length()  
    |-String substring(int start)  
  |-修改
    |-StringBuffer replace(int start, int end, String str)  将start到end-1的字符替换为str
    |-void setCharAt(int index, char ch)  替换指定index位置的ch字符
  |-反转 
    |-StringBuffer reverse()
  |-将缓存区中的数据存储到指定数据中
    void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)  
StringBuilder 字符串缓冲区(单线程使用)常用
基本数据类型对象包装类
  关键字      类
  byte        Byte
  short       Short
  int         Integer
  long        Long 
  boolean     Boolean 
  float       Float 
  double      Double 
  char        Character

  基本数据类型对象包装类的最常见作用
  就是用于基本数据类型和字符串类型之间做转换

  基本数据类型转成字符串

    基本数据类型+""
    或
    基本数据类型.toString(基本数据类型值)

    如 ：Integer.toString(34);//将34整数变成"34"

  字符串转成基本数据类型
    xxx a = Xxx.parseXxx(String);

    eg:
    int a = Integer.parseInt("123");//必须传入数字格式的字符串
    double b = Double.parseDouble("123");
    boolean c = Boolean.parseBoolean("true")

  十进制转换成其他进制
    String toBinaryString(int i)  
    String toHexString(int i)  
    String toOctalString(int i)  

  其他进制转成十进制
    int parseInt(String s, int radix)  radix为几进制 如radix=2就为2进制转换10进制
集合框架 
  |-Collection java.util包中
    |-方法 查看api文档（每种方法都有返回值
      |-添加 
        add(E e) 添加一个e元素
        addAll(Collection<? extends E> c) 添加c集合中的所有元素 
      |-删除 
        clear() 删除本集合中的所有元素
        remove(Object o) 移除本集合中的指定元素o
        removeAll(Collection<?> c) 移除本集合与c的交集元素
        retainAll(Collection<?> c) 只保留本集合中与c为交集元素的元素
      |-比较 
        contains(Object o)  如果包含o元素则返回true
        containsAll(Collection<?> c) 如果包含c中的所有元素则返回true
        equals(Object o) 如果与o中的所有元素相同则返回true
        boolean isEmpty()  如果本集合中没有元素则返回true
      |-获取
        数值
        size() 返回本集合中的元素个数
        hashCode() 返回本集合的哈希值
        数组
        toArray() 
        toArray(T[] a) 
      |-迭代器 Iterator
        |-iterator() 返回在本集合的元素上进行迭代的迭代器
        |-方法
          |-hasNext() 如果仍有元素可以迭代，则返回true
          |-next() 返回迭代的下一个元素
          |-remove() 
    |-List 元素是有序的，元素可以重复
      |-特有方法
        |-添加
          |-add(int index, E element) 在指定位置插入element
          |-addAll(int index, Collection<? extends E> c) 在指定位置插入集合c中的所有元素
        |-获取
          |-get(int index) 返回指定位置的元素
          |-indexOf(Object o) 返回此列表中第一次出现的指定元素的索引；
            如果此列表不包含该元素，则返回 -1。
          |-lastIndexOf(Object o) 返回此列表中最后出现的指定元素的索引；
            如果列表不包含此元素，则返回 -1。
          |-subList(int fromIndex, int toIndex) 返回列表中指定的 fromIndex（包括 ）
          和 toIndex（不包括）之间的部分数据。
        |-移除
          |-remove(int index) 移除列表中指定位置的元素
        |-替换
          |-set(int index, E element) 用指定元素替换列表中指定位置的元素
        |-列表迭代器 ListIterator 继承自Iterator
          |-listIterator() 返回列表中元素的列表迭代器（按适当顺序）
          |-listIterator(int index) 返回列表中元素的列表迭代器（按适当顺序）
            ，从列表的指定位置开始。
          |-特有方法
            |-void add(E e)   将指定的元素插入列表（可选操作）。
            |-boolean hasNext()  以正向遍历列表时，如果列表迭代器有多个元素，则返回 true
              （换句话说，如果 next 返回一个元素而不是抛出异常，则返回 true）。
            |-boolean hasPrevious()   如果以逆向遍历列表，列表迭代器有多个元素，则返回 true
            |-int nextIndex()  返回对 next 的后续调用所返回元素的索引。
            |-E previous()  返回列表中的前一个元素。
            |-int previousIndex()  返回对 previous 的后续调用所返回元素的索引。
            |-void set(E e)  用指定元素替换 next 或 previous 返回的最后一个元素
            |-void remove() 从列表中移除由 next 或 previous 返回的最后一个元素
      |-ArrayList 底层使用的是数组数据结构 线程不同步
      |-LinkedList 底层使用的是链表数据结构
        |-特有方法
          |-void addFirst(E e)  将指定元素插入此列表的开头。
          |-void addLast(E e)  将指定元素添加到此列表的结尾。
          |-boolean offerFirst(E e)  在此列表的开头插入指定的元素。 
          |-boolean offerLast(E e)  在此列表末尾插入指定的元素。
          |-E peekFirst() 获取但不移除此列表的第一个元素；如果此列表为空，则返回 null。
          |-E peekLast() 获取但不移除此列表的最后一个元素；如果此列表为空，则返回 null。
          |-E pollFirst()  获取并移除此列表的第一个元素；如果此列表为空，则返回 null。
          |-E pollLast()    获取并移除此列表的最后一个元素；如果此列表为空，则返回 null。
      |-Vector 底层是数组数据结构 线程同步 被ArrayList替代
        |-特有方法 带有Element的方法
          |-Enumeration<E> elements()  
      List集合判断元素是否相同，依据的是元素的equals方法
      如果要修改判断规则可直接覆写equals方法
    |-Set 元素是无序的，元素不可以重复
      |-HashSet
      |-TreeSet
IO
  FileReader
  FileWriter
  BufferedReader
  BufferedWriter